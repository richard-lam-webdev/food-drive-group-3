// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Utilisateurs {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  nom           String?
  prenom        String?
  numeroRue     String?
  codePostal    String?
  ville         String?
  role          Role            @default(client)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  Notifications Notifications[]
  ImagesTemp    ImagesTemp[]
  RecettesTemp  RecettesTemp[]
  Commandes     Commandes[]
}

model Notifications {
  id           Int          @id @default(autoincrement())
  user_id      Int
  message      String
  seen         Boolean      @default(false)
  created_at   DateTime     @default(now())
  Utilisateurs Utilisateurs @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ImagesTemp {
  id           Int          @id @default(autoincrement())
  user_id      Int
  image_url    String       @unique
  uploaded_at  DateTime     @default(now())
  Utilisateurs Utilisateurs @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model RecettesTemp {
  id           Int          @id @default(autoincrement())
  user_id      Int
  nom          String
  description  String?      @db.Text
  ingredients  String?
  instructions String?      @db.Text
  generated_at DateTime     @default(now())
  Utilisateurs Utilisateurs @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Categories {
  id         Int        @id @default(autoincrement())
  nom        String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Produits   Produits[]
}

model Produits {
  id              Int               @id @default(autoincrement())
  nom             String
  description     String?
  prix            Float
  quantite_stock  Int
  categorie_id    Int
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Categories      Categories        @relation(fields: [categorie_id], references: [id], onDelete: Cascade)
  LignesCommandes LignesCommandes[]
}

model Commandes {
  id              Int               @id @default(autoincrement())
  user_id         Int
  total           Float
  statut          CommandeStatus    @default(en_cours_de_paiement)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Utilisateurs    Utilisateurs      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  LignesCommandes LignesCommandes[]

  HistoriqueCommandes HistoriqueCommandes[]
}

model LignesCommandes {
  id            Int       @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantite      Int
  prix_unitaire Float
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  Produits      Produits  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Commandes     Commandes @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model HistoriqueCommandes {
  id         Int            @id @default(autoincrement())
  order_id   Int
  statut     CommandeStatus
  changed_at DateTime       @default(now())
  Commandes  Commandes      @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

enum Role {
  client
  admin
  magasinier
}

enum ImageStatus {
  en_attente
  traitee
}

enum CommandeStatus {
  panier
  en_cours_de_paiement
  payee
  en_preparation
  expediee
  livree
}
